{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"audio/","title":"Audio Output & Serial Console","text":""},{"location":"audio/#audio-output-pins-required","title":"Audio Output Pins (Required)","text":"<p>The audio output of the WAV Trigger Pro is routed to three 0.1\"-spaced headers labeled L, G and R. This requires some through-hole soldering of either wires or headers to connect to your preferred audio output. For the purposes of this guide we'll be soldering headers to these pins to connect to a SparkFun TRRS 3.5MM Jack Breakout to plug a pair of headphones into.</p> <p>The WAV Trigger Pro requires soldering to these pins regardless of how it is configured and used so make sure to complete this step at some point during your preferred assembly.</p>"},{"location":"audio/#soldering","title":"Soldering","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>Start by locating the three-pin PTH header with the labels R, G and L. Depending on whether you prefer a permanent soldered connection or something removeable, solder either wire or male/female headers to these pins like the photo below shows with male headers soldered:</p> <p></p> <p>If you're using the TRRS Breakout like we are, make sure to solder male/female headers or wire to the pins on that breakout like this:</p> <p></p>"},{"location":"audio/#wiring","title":"Wiring","text":"<p>Next connect the TRRS Breakout (or your preferred audio output) to the WAV Trigger's audio pins. Make the following connections if you're connecting the WAV Trigger to the TRRS 3.5mm Breakout:</p> WAV Trigger Pro TRR Breakout Color R RING1 RED G SLEEVE BLACK L TIP YELLOW <p></p>"},{"location":"audio/#serial-console-interface","title":"Serial Console Interface","text":"<p>The WAV Trigger Pro features a serial console interface that works over the board's RX/TX pins (@3.3V Logic) allowing users to connect a USB-to-Serial converter like the Serial Basic Breakout - 3.3V USB-C to send and receive information over that serial connection. The serial console works in all WAV Trigger Pro assembly options we cover in the following sections to provide helpful information about and control of the board.</p>"},{"location":"audio/#serial-assembly","title":"Serial Assembly","text":"<p>Connect to the serial console interface using the TX/RX and GND pins on the WAV Trigger Pro making sure to use either a 3.3V serial converter like the one linked above or by properly level shifting one that runs at a different logic to 3.3V. The table and photo below outline the connections between the WAV Trigger and Serial Basic Breakout - 3.3V:</p> WAV Trigger Pro Serial Basic Color TX RX ORANGE RX TX GREEN G GND BLACK <p></p> <p>After connecting the boards together, connect the Serial Basic to your computer over USB and connect the WAV Trigger Pro either over USB-C or another of the power inputs (Qwiic, 5V). Next, open the serial monitor in the Arudino IDE (or if you prefer, another terminal program) at 57.6k baud with Carriage Return line ending enabled. </p> <p>Next, type in \"help\" (enter this and all other commands in all lowercase) and it will print out a list of available commands along with any available parameters to customize the command. Commands with just one parameter can be sent with a single space between the command and parameter. For commands with multiple parameters, separate the command and parameters using a comma. The list below outlines each command and what it does:</p> <ul> <li>help - Displays the available commands and their parameters</li> <li>stat - Returns a string that includes the WAV Trigger Pro's firmware version and build info as well as info about the \u00b5SD card currently in the board</li> <li>play - Plays the specified track number (if it exists). If this command is sent with just one parameter the track plays at full volume, center panned, 0 pitch offset, attack and release times of 0ms and is not looped or locked. Use the optional additional parameters outlined in the \"help\" menu to customize the playback.</li> <li>stop - If sent with a track number, this stops the track immediately. The track fades out over the specified number of milliseconds before stopping if sent with a release value. If no track number is sent, this stops all tracks immediately.</li> <li>gain - Sets the output attenuation of the board.</li> <li>v - Returns the number of currently active voices.</li> <li>sd - When sent with no parameter, this returns the current longest \u00b5SD block read in microseconds since the WAV Trigger Pro was powered on, reset or the value was reset. If sent with a parameter of 0, this resets the value manually.</li> <li>test - This command will stop the audio engine and start a block read timing test of the installed microSD card. The optional test count parameter can be used to specify the number of block read cycles in the test. If used with no parameter, the test will perform 100,000 block read cycles. It\u2019s important to keep in mind that the test will only read blocks actually allocated to .wav files, so the more .wav files are on your card, the more of the card will be tested. While the test is running, a command of \u201cr\u201d can be used to see partial results, or \u201cs\u201d to stop the test prematurely. The audio engine will be restarted when the test finished or is stopped. For a detailed overview and discussion of the test performed here, refer to this article</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#required-audio-files","title":"Required Audio Files","text":"<p>The examples included in the WAV Trigger Pro Qwiic library assume users have an SD card with the demo tracks loaded onto it. You can download a copy of the audio tracks from the link below:</p> <p> WAV Trigger Pro Arduino Example Sounds </p> <p>The Arduino examples do not require a preset, just the specific tracks included in the link above. Just download these tracks, unzip the files and load them onto your \u00b5SD card and you're ready to get started with the Aruino examples.</p>"},{"location":"examples/#code-to-note","title":"Code to Note","text":"<p>All four examples include similar setups to initialize the WAV Trigger Pro on the I<sup>2</sup>C bus, return the firmware version string and number of available audio tracks. All of these steps have a message printed out over serial so to view them open the Arduino serial monitor with the baud set to 9600 to see these messages. If any of these fail, the code will print out \"WAV Trigger Pro response not available\".</p>"},{"location":"examples/#example-1-loop-track","title":"Example 1 - Loop Track","text":"<p>The first example demonstrates how to loop a single track (in this case, a 440Hz sine wave) continuously. Open the example by navigating in Arduino to \"File &gt; Examples &gt; SparkFun WAV Trigger Pro Qwiic &gt; Example_01_Loop_Track\" or copy the code below into a blank sketch. </p> Example 1 - Loop Track <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 1\n//               Loop a track\n// Date Created: 1/6/2025\n//\n//     Comments: This example starts a single track looping.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 500\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n\n  // Start the A440 sine wave looping, -20dB, center, 1 second attack.\n  wtp.trackPlayPoly(100, -20, BALANCE_MID, 1000, 0, LOOP_FLAG);\n\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre> <p>The example initializes the WAV Trigger Pro over I<sup>2</sup>C along with the other checks outlined above and then plays the sine wave file on loop at -20dB in stereo (centered), with a 1 second attack using the command: <code>wtp.trackPlayPoly(100, -20, BALANCE_MID, 1000, 0, LOOP_FLAG);</code></p>"},{"location":"examples/#example-2-play-tracks","title":"Example 2 - Play Tracks","text":"<p>The second example demonstrates how to loop through a sequence of tracks. It continuously plays the eight spoken number tracks in sequential order alternating output between the left and right audio channels.</p> Example 2 - Play Tracks <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 2\n//               Playing tracks\n// Date Created: 1/3/2025\n//\n//     Comments: This example continuously plays the eight spoken number\n//               tracks in order, to alternating left right output channels.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 500\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nunsigned long gLastPollMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\nint gNumActiveVoices = 0;\nint gTrackNum;\nint gBalance;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n  gLastPollMs = gMsTick;\n  gTrackNum = 0;\n  gBalance = 0;\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Play next track when the previous is finished\n  if ((gMsTick - gLastPollMs) &gt; POLLING_PERIOD_MS) {\n    gLastPollMs = gMsTick;\n\n    // Wait for no tracks playing\n    gNumActiveVoices = wtp.getNumActiveVoices();\n    if (gNumActiveVoices == 0) {\n      if (++gTrackNum &gt; 8)\n        gTrackNum = 1;\n\n      Serial.print(\"Play track: \");\n      Serial.print(gTrackNum);\n      Serial.print(\"\\n\");\n\n      wtp.trackPlayPoly(gTrackNum, 0, gBalance, 0, 0, 0);\n\n      // Next track should be to the opposite channel\n      if (gBalance &gt; 0)\n        gBalance = 0;\n      else\n        gBalance = 127;\n    }\n  }\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 3 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#example-3-mix-tracks","title":"Example 3 - Mix Tracks","text":"<p>The third example shows how to mix several tracks to play together. It starts the mix with an ambient music track, then plays a dialog track followed by a fade into a second music track.</p> Example 3 - Mix Tracks <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 3\n//               Mixing tracks\n// Date Created: 1/3/2025\n//\n//     Comments: This example combines music and dialog tracks.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 100\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nunsigned long gLastPollMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\nint gNumActiveVoices = 0;\nint gDelayCount = 0;\nint gState = 0;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n  gLastPollMs = gMsTick;\n  gDelayCount = 10;\n  gState = 0;\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Proceed to the next state when the time comes\n  if ((gMsTick - gLastPollMs) &gt; POLLING_PERIOD_MS) {\n    gLastPollMs = gMsTick;\n\n    // Process according to state\n    switch (gState) {\n\n      // State 0: start the ambient music\n      case 0:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Starting music 1\");\n          wtp.trackPlayPoly(102, 0, BALANCE_MID, 0, 0, 0);\n          gState++;\n          gDelayCount = 60;  // Delay 6 seconds\n        }\n        break;\n\n      // State 1: start dialog 2 track\n      case 1:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Starting dialog 1\");\n          wtp.trackPlayPoly(105, 0, BALANCE_MID, 0, 0, 0);\n          gState++;\n        }\n        break;\n\n      // State 2: wait for dialog track to finish\n      case 2:\n        if (wtp.trackGetStatus(105) == 0) {\n          Serial.println(\"Cross-fading to music 2 \");\n          wtp.trackPlayPoly(103, 0, BALANCE_MID, 4000, 0, 0);\n          gState++;\n          gDelayCount = 20;  // Delay 1 second\n        }\n        break;\n\n      // State 3: crossfade to music 2\n      case 3:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          wtp.trackStop(102, 4000);\n          gState++;\n          gDelayCount = 30;\n        }\n        break;\n\n      // Do nothing\n      default:\n        break;\n    }\n  }\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 3 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#example-4-midi","title":"Example 4 - MIDI","text":"<p>The fourth example demonstrates how to use MIDI commands to play tracks on the WAV Trigger Pro. The example cycles between playing a combination of tracks to create a piano chord, percussion tracks and a second piano chord.</p> Example 4 - MIDI <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 3\n//               Using MIDI\n// Date Created: 1/3/2025\n//\n//     Comments: This example uses MIDI to play tracks.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 100\n\n#define TEMPO_PERIOD 10\n\n#define MIDI_NOTE_ON 0x90\n#define MIDI_NOTE_OFF 0x80\n\n#define NOTE_01 50\n#define NOTE_02 54\n#define NOTE_03 57\n\n#define NOTE_11 49\n#define NOTE_12 52\n#define NOTE_13 56\n\n#define NOTE_21 115\n#define NOTE_22 112\n\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nunsigned long gLastPollMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\nint gNumActiveVoices = 0;\nint gDelayCount = 0;\nint gState = 0;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n  gLastPollMs = gMsTick;\n  gDelayCount = 10;\n  gState = 0;\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Proceed to the next state when the time comes\n  if ((gMsTick - gLastPollMs) &gt; POLLING_PERIOD_MS) {\n    gLastPollMs = gMsTick;\n\n    // Process according to state\n    switch (gState) {\n\n      // State 0: Play the first chord\n      case 0:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing chord 1\");\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_11, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_12, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_13, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_01, 100);\n          delay(50);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_02, 100);\n          delay(50);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_03, 100);\n          gState++;\n          gDelayCount = TEMPO_PERIOD;  // Delay 3\n        }\n        break;\n\n      case 1:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing perc 1\");\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_21, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_22, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_21, 100);\n          gState++;\n          gDelayCount = TEMPO_PERIOD;  // Delay 3\n        }\n        break;\n\n      // State 1: Play the second chord\n      case 2:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing chord 2\");\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_01, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_02, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_03, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_11, 85);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_12, 85);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_13, 85);\n          gState++;\n          gDelayCount = TEMPO_PERIOD;  // Delay\n        }\n        break;\n\n      case 3:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing perc 2\");\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_22, 100);\n          gState = 0;\n          gDelayCount = TEMPO_PERIOD;  // Delay\n        }\n        break;\n\n      // Do nothing\n      default:\n        break;\n    }\n  }\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 3 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre> <p>The main loop plays these tracks by sending a MIDI message for the selected tracks using the <code>sendMidiMsg</code> function.</p>"},{"location":"firmware/","title":"Updating Firmware","text":"<p>The Qwiic WAV Trigger Pro comes pre-loaded with firmware to use it as a MIDI device but, as covered previously, the WAV Trigger Pro can be used as either a MIDI device or MIDI host with the approrpiate firmware. In the future, there may be updates to the WAV Trigger Pro's firmware users can upload to the board if necessary. In this section we'll go over how to upload the MIDI Host firmware to the board but these steps also work for updating or reverting firmware versions.</p>"},{"location":"firmware/#stm32-cubeprogrammer-software","title":"STM32 CubeProgrammer Software","text":"<p>Uploading new firmware is best done using the STM32 CubeProgrammer software. You can upload new firmware to the board over USB-C, USB-to-Serial converter like the Serial Basic Breakout - 3.3V USB-C connected to the serial PTH pins, or with an STLink debugger and the SWD header. We strongly recommend uploading over USB since all you need is a USB-C cable, closing the BOOT jumper/tying BOOT to GND, and a computer with the STM32 Cube Programmer software. This guide only covers uploading new firmware over USB-C.</p> <p>Start by downloading the CubeProgrammer software for your operating system from this page. Note, downloading does require submitting a valid e-mail and clicking a confirmation link sent to that e-mail. Once downloaded, follow the installation instructions and then open Cube Programmer and you should be greeted by a screen similar to the image below:</p> <p></p>"},{"location":"firmware/#updloading-new-wav-trigger-firmware","title":"Updloading New WAV Trigger Firmware","text":"<p>All versions of the WAV Trigger Pro firmware are hosted on robertsonics' downloads page under the \"WAV Trigger Pro\" header. The WAV Trigger Pro ships with the MIDI Device Firmware so let's take a look at uploading the MIDI Host Firmware.</p>"},{"location":"firmware/#midi-host-firmware","title":"MIDI Host Firmware","text":"<p>Start by downloading the MIDI Host firmware from robertsonics' downloads page. Take note of where that downloads to as we'll need to direct the STM32 CubeProgrammer software to that file.</p>"},{"location":"firmware/#boot-jumper","title":"BOOT Jumper","text":"<p>Prior to connecting the WAV Trigger Pro to your computer, close the BOOT PTH jumper (either using headers and a jumper connector/jumper wire or simply temporarily pulling BOOT to GND) to set the STM32 into BOOT Mode. The board should stay in BOOT mode until reset or power cycle. The photo below shows the BOOT jumper closed using a jumper wire plugged into male headers on the board:</p> <p></p>"},{"location":"firmware/#upload-new-firmware","title":"Upload New Firmware","text":"<p>With the board in BOOT mode, return to the Cube Programmer software and switch to the \"Erasing &amp; Programming\" view by clicking the second icon on the left side of the window. Next, either enter the filepath for the new firmware or click \"Browse\" to naivgate to the firmware file. On the right side of the window, select \"USB\" on the drop-down menu for programmer type. The USB port should automatically detect which port the WAV Trigger is on but if not, click the refresh button and manually select the port, then click \"Connect\".</p> <p></p> <p>Make sure everything is configured properly and then click \"Start Programming\" to begin uploading the new firmware. This should take only a few seconds and once it's complete, disconnect the BOOT jumper (if needed) and press the RESET button. The WAV Trigger Pro should now appear as a USB audio device.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section we'll take a closer look at the components on the WAV Trigger Pro (Qwiic).</p>"},{"location":"hardware_overview/#stm32h-microcontroller","title":"STM32H Microcontroller","text":"<p>The WAV Trigger Pro uses the STM32H750VBTx central processor from ST Microelectronics<sup>\u00a9</sup>.  </p> <p></p> <p>The STM32 features a 32-bit Arm<sup>\u00ae</sup> Cortex<sup>\u00ae</sup>-M7 core with 128 Kb of Flash memory and 1Mb of RAM. It has an integrated USB converter that allows for easy updating of firmware over the USB-C connector on the board using STM's Cube Programmer tool. Updating the WAV Trigger Pro's firmware is covered in more detail in the Updating Firmware section of this guide.</p>"},{"location":"hardware_overview/#power-inputs","title":"Power Inputs","text":"<p>The WAV Trigger Pro has three options for powering the board; USB-C, Qwiic, or dedicated through-hole pins.</p> <p></p>"},{"location":"hardware_overview/#usb-c","title":"USB-C","text":"<p>The USB-C connector on the board provides both a serial connection along with a power input. By default, when plugging the board in over USB-C to a computer, it will appear as a USB MIDI Device. When the WAV Trigger Pro is configured to act as a USB MIDI Host and powered through the dedicated through-hole power pins, the USB-C connector can supply 500mA@5V to a connected USB MIDI device. Running the WAV Trigger Pro as a USB MIDI Host requires uploading alternate firmware as well as modifying the appropriate solder jumpers. Read on to the MIDI Host Assembly section for detailed information on this configuration.</p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board includes a pair of Qwiic connectors to integrate it into SparkFun's Qwiic ecosystem. These connectors provide both an I<sup>2</sup>C connection as well as power (3.3V) to the WAV Trigger Pro. The WAV Trigger Pro Arduino library works over I<sup>2</sup>C to control the board using an Arduino microcontroller.</p>"},{"location":"hardware_overview/#through-hole-power-pins","title":"Through-Hole Power Pins","text":"<p>This pair of 0.1\"-spaced plated through-hole (PTH) pins labeled 5V and GND accept a supply voltage of 5V. This power input is primarily intended for running the WAV Trigger Pro as a USB MIDI Host to provide 5V/500mA to a MIDI device connected to the board's USB-C connector.</p>"},{"location":"hardware_overview/#polyphonic-engine","title":"Polyphonic Engine","text":"<p>The operation of the WAV Trigger Pro's polyphonic engine is proprietary to Robertsonics. While we cannot go into exact details on how this works, here are some highlights of the engine's functionality:</p> <p></p> <ul> <li>Up to 4096 uncompressed 16-bit, 44.1kHz mono and stereo WAV files (CD Quality)</li> <li>Polyphonic - Play and mix up to 24 tracks independently and simultaneously with independent pitch control</li> <li>Low Latency - Timing from triggering a track to playback typically takes only 2.5ms (4ms max)</li> <li>MIDI notes can trigger up to 8 independent actions, routing tracks to any combination of outputs</li> <li>Up to 8 velocity range assignments per note to trigger alternate samples</li> <li>Each event provides independent pitch offset (in cents) allowing for true multi-sampling</li> <li>Seamless looping over arbitrary track length</li> </ul>"},{"location":"hardware_overview/#midi-control","title":"MIDI Control","text":"<p>The WAV Trigger Pro introduces MIDI-USB host and device capabilities. The board can function as either a USB-MIDI device or USB-MIDI host. When acting as a USB-MIDI host and powered independently it can power a connected MIDI device with 500mA@5V. This means you can have complete USB-MIDI interactivity with the WAV Trigger Pro with no computer required! Do note, running the WAV Trigger Pro as a MIDI-USB host requires uploading alternate firmware as well as physically adjusting the appropriate solder jumpers. Read on to the \"MIDI Host Assembly\" section for complete instructions.</p>"},{"location":"hardware_overview/#trigger-control","title":"Trigger Control","text":"<p>The board also includes eight independent trigger inputs routed to through-hole pins. All eight trigger pins can be individually configured. All trigger pins a 3.3V tolerant.</p>"},{"location":"hardware_overview/#qwiic-i2c-control","title":"Qwiic (I<sup>2</sup>C) Control","text":"<p>This WAV Trigger also includes a pair of Qwiic connectors to integrate with SparkFun's Qwiic ecosystem. Users can use this in tandem with the [WAV Trigger Pro Arduino Library]((https://github.com/robertsonics/WAV_Trigger_Pro_Qwiic_Arduino_Library) to control the WAV Trigger Pro using an Arduino development board.</p>"},{"location":"hardware_overview/#audio-output","title":"Audio Output","text":"<p>The WAV Trigger Pro has two channels for audio output routed to through-hole pins. Soldering to these pins is required for the audio output to work properly. If you have never soldered before or want some tips, check out our How to Solder: Through Hole Soldering Tutorial.</p>"},{"location":"hardware_overview/#presets","title":"Presets","text":"<p>The WAV Trigger Pro introduces Presets! Presets are managed through spreadsheet .csv files (Excel or Google Sheets) loaded onto a connected \u00b5SD card which describe up to 8 actions per MIDI note, based on channel and velocity. Each action can start and independent track with individual gain, balance, attack, release, and pitch. This allows multiple sounds to be mixed in performance. If you've used previous WAV Triggers before, these Preset files take the place of the configuration app. You can have multiple presets stored on the file that you can switch between. Read on to the Preset File section of this guide for detailed information on how to setup and use these files.</p>"},{"location":"hardware_overview/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The \u00b5SD card holder on the WAV Trigger Pro is on the back/reverse side of the board. This card is used to store <code>.wav</code> audio files and preset <code>.csv</code> files. </p> <p></p>"},{"location":"hardware_overview/#pth-pins","title":"PTH Pins","text":"<p>The Qwiic WAV Trigger Pro has several plated through-hole (PTH) headers around the board. Let's take a closer look at each of these headers and how they work.</p> <p> \"Click to enlarge\"</p>"},{"location":"hardware_overview/#trigger-pins","title":"Trigger Pins","text":"<p>The board has eight PTH trigger pins mapped to the first 8 MIDI notes meaning activating Trigger pin 1 sends a MIDI Note-on message for note 1 and releasing Trigger pin 1 sends a MIDI-Note-off message for note 1. The trigger pins pulled HIGH to 3.3V internally and are active LOW. Pulling them to ground through either a button, switch, relay, or active output (eg. microcontroller I/O pin) activates the trigger. </p> <p>All trigger pins are 3.3V tolerant so if you're using an active output to control the triggers make sure the inactive state of the triggers does not exceed 3.3V. Users can adjust how these trigger inputs behave in the Preset file. Read on to the Preset File of this guide for more information on configuring the triggers and other MIDI note behavior.</p>"},{"location":"hardware_overview/#audio-output_1","title":"Audio Output","text":"<p>The WAV Trigger Pro has two channel (stereo) output routed only to PTH pins labeled L, R, and G.</p>"},{"location":"hardware_overview/#serialuart-boot-pins","title":"Serial/UART &amp; Boot Pins","text":"<p>The STM32's serial UART (RX/TX) pins and BOOT pin are routed to PTHs. Connecting the BOOT pin to ground puts the STM32 into BOOT mode for uploading new firmware to the board over either USB-C or a serial connection. The BOOT pin is routed directly next to a Ground pin to make closing this pin jumper easy. The UART pins operate at 3.3V logic.</p> <p>The WAV Trigger Pro firmware (both Device &amp; Host) also sets these pins up to be used with as a serial console interface  over a serial terminal like the Arduino Serial monitor. The serial console accepts ASCII commands to as play, loop and stop tracks, loading presets and also return device status which can help provide important information about a connected \u00b5SD card's performance. The serial console interface works simultaneously with everything else running on the board. Read on to the Audio Output &amp; Serial Console Interface section of this guide for more information.</p>"},{"location":"hardware_overview/#stm-swd-header","title":"STM SWD Header","text":"<p>The board includes a 5x2 Software Debug (SWD) header for low-level debugging of the STM32. The header connects to the STM32's SWD pins: SWDIO, SWCLK &amp; SWO. For more information about using the SWD interface, refer to the STM32's Datasheet, Reference Manual &amp; Hardware Development App Note.</p>"},{"location":"hardware_overview/#power-input","title":"Power Input","text":"<p>When not using USB or Qwiic for power, connect a 5V supply to power the board. </p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board has two LEDs on board labeled PWR and STAT. </p> <p></p> <p>The red PWR LED indicates whenever the board is powered. The green STAT LED provides helpful information on the current status of the WAV Trigger. On reset, the STAT LED blinks in the following patterns:</p> <ul> <li>3 Quick Blinks - No problems. Both the \u00b5SD card and WAV files were found<ul> <li>After the initial pattern, the STAT LED will flash quickly every couple seconds as a \"Heartbeat\"</li> <li>Goes solid while audio is playing</li> </ul> </li> <li>1 Long then 1 Short Blink (Repeating) - No \u00b5SD card found</li> <li>1 Long then 2 Short Blinks (Repeating) - File system error</li> <li>1 Long then 3 Short Blinks (Repeating) - No WAV Fils found on \u00b5SD card</li> <li>1 Long then 4 Short Blinks (Repeating) - Memory error</li> </ul>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The WAV Trigger Pro has six solder jumpers labeled HST/DEV, VBUS, ANLG, I<sup>2</sup>C and LED. </p> <p></p> <p>The list below outlines their names, functionality, default states and any notes on their use.</p> <ul> <li>HST/DEV - This pair of three-way solder jumpers work with the VBUS jumper to switch the functionality of USB-MIDI control between acting as a Device or Host. The HST/DEV jumpers default to set the board to act as a MIDI Device.<sup>1</sup></li> <li>VBUS - This jumper controls whether the USB-C connector accepts or supplies 5V. It is OPEN by default to use the USB-C connector to receive power from a USB-C source. Closing it nets the output from VIN (5V/GND PTHs) to VUSB so the USB-C connector outputs 5V to a device connected to it.<sup>1</sup> </li> <li>ANLG - This jumper ties the audio output's ground to the common ground on the board. It is CLOSED by default. Open it to isolate the audio's ground from the rest of the WAV Trigger Pro's ground plane.</li> <li>I<sup>2</sup>C - Pulls the SDA/SCL lines to 3.3V through a pair of 2k\u03a9 resistors. It is CLOSED by default. Open it to disable pullup on the I<sup>2</sup>C bus.</li> <li>LED - Completes the Power LED circuit. CLOSED by default. Open it to disable the Power LED to help reduce the current draw.</li> </ul> <p>Note 1: HST/DEV &amp; VBUS Jumpers</p> <p>How to use and set these jumpers is covered in more detail in the MIDI Host Assembly section of this guide.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The Qwiic WAV Trigger Pro measures 1.5\" x 1.75\" (38.10mm x 44.45mm) with four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"introduction/","title":"Hookup Guide","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Qwiic WAV Trigger Pro SKU: WIG-25860 <p> <li> <p>The Qwiic WAV Trigger Pro is the latest evolution of the line of high-fidelity polyphonic audio players from robertsonics. The Qwiic WAV Trigger Pro improves on the previous versions with a more powerful processor, enhanced MIDI processing - including velocity switching and multi-timbral support - and MIDI USB Device (Default) and MIDI USB Host support, all in a smaller 1.75\" x 1.5\" footprint!  The Qwiic WAV Trigger Pro supports up to 4096 uncompressed 16-bit, 44.1kHz mono and stereo WAV files matching CD audio quality. The WAV Trigger Pro supports polyphony and can play and mix up to 24 tracks simultaneously and independently with exceptionally low latency (7ms typically). Control track playback via either 8 programmable trigger inputs, I<sup>2</sup>C (Qwiic), or MIDI (USB, Serial UART, or Qwiic). The board can function as both a USB MIDI device and host meaning if the WAV Trigger Pro has power in USB MIDI Host mode it can supply up to 500mA@5V to a connected MIDI device over USB-C allowing for USB MIDI control with no computer required.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>The Qwiic WAV Trigger Pro requires a few additional items as well as some through-hole soldering to get up and running properly. If you'd like to follow along with the examples in this tutorial, you'll want at least the following items along with a pair of corded headphones. If you'd like to follow the USB MIDI Host example, make sure you have a USB MIDI device like a MIDI Keyboard or Pad.</p> <ul> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>microSD Card with Adapter - 32GB (Class 10) COM-14832</p> <li> <p> <p>SparkFun TRRS 3.5mm Jack Breakout BOB-11570</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> <li> <p> <p>Jumper Wires - Connected 6\" (M/F, 20 pack) PRT-12794</p>"},{"location":"introduction/#qwiic-arduino-materials","title":"Qwiic &amp; Arduino Materials","text":"<p>Users who wish to use the Qwiic WAV Trigger Pro with the Qwiic ecosystem and Arduino library, you may need one or more of the following products:</p> <ul> <li> <p> <p>SparkFun RedBoard Plus DEV-18158</p> <li> <p> <p>SparkFun Qwiic Pocket Development Board - ESP32-C6 DEV-22925</p> <li> <p> <p>Flexible Qwiic Cable - 50mm PRT-17260</p> <li> <p> <p>Flexible Qwiic Cable - 200mm PRT-17258 </p>"},{"location":"introduction/#soldering-tools-accessories","title":"Soldering Tools &amp; Accessories","text":"<p>The Qwiic WAV Trigger Pro does require some through-hole soldering for the best, permanent installation and uses. Users will need to at least solder to the audio output pins as they are routed to a 0.1\"-spaced PTH header. If you need any soldering tools or materials, check out the following products: </p> <ul> <li> <p> <p>Hakko FX-888DX Soldering Station TOL-25926</p> <li> <p> <p>PINECIL Soldering Iron Kit TOL-24063</p> <li> <p> <p>Hook-up Stranded Wire - Red (22 AWG) PRT-08865</p> <li> <p> <p>Hook-up Stranded Wire - Black (22 AWG) PRT-08867</p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>Before getting started with this guide and the Qwiic WAV Trigger Pro, you may want to read through some of the tutorials linked below if you're not familiar with the concepts covered in them:</p> <ul> <li> <p> MIDI </p> </li> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"midi_device/","title":"MIDI Device Assembly","text":"<p>With the default firmware, the WAV Trigger Pro acts as a MIDI Device and can be controlled from a MIDI Host over USB. Simply plug the board into your keyboard or other MIDI controller and start playing. You can also use your computer with a Digital Audio Workstation (DAW) software like MIDI-OX to route incoming MIDI messages from your keyboard to the WAV Trigger Pro.</p> <p>[]</p> <p>This video from robertsonics shows how to use the Qwiic WAV Triger Pro as a MIDI Device connected to a MIDI keyboard through a PC with his Keyboard Demo SD image:</p> <p> </p>"},{"location":"midi_host/","title":"MIDI Host Assembly","text":""},{"location":"midi_host/#midi-host-firmware","title":"MIDI Host Firmware","text":"<p>Running the WAV Trigger Pro as a MIDI USB Host requires uploading the proper firmware. Before setting up the WAV Trigger Pro to act as a MIDI Host, refer to the Updating Firmware section for detailed instructions on uploading the MIDI Host firmware. </p>"},{"location":"midi_host/#hardware-adjustments","title":"Hardware Adjustments","text":"<p>Now we need to adjust the HST/DEV solder jumpers to configure the board to act as a USB Host. Locate these jumpers on the underside of the board and sever the trace connecting the \"Center\" and \"Right\" pads and then carefully solder the \"Center\" and \"Left\" pads together. Next, close the VBUS jumper by soldering the two pads together. After adjusting these jumpers your board should look similar to the photo below:</p> <p></p> <p>Next, prepare to connect the power supply for the MIDI assembly by either soldering wires directly to the 5V and GND pins or soldering headers to these pins for a removeable power connection. We opted for headers to make a temporary power connection shown in the photo below:</p> <p></p>"},{"location":"midi_host/#completed-assembly","title":"Completed Assembly","text":"<p>Now that the WAV Trigger Pro is set up to act as a MIDI host, connect your MIDI device to the WAV Trigger Pro over USB-C. We used this USB MIDI Keyboard connected to the WAV Trigger Pro using a USB Type-C to USB Type-B cable. With that plugged in, connect the WAV Trigger Pro to a 5V power supply and it should end up looking something like this:</p> <p></p>"},{"location":"midi_host/#drumpad-demo-video","title":"Drumpad Demo Video","text":"<p>The video below by robersonics gives a short rundown on using the Qwiic WAV Trigger Pro as a MIDI Host to a MIDI drumpad using his Percussion Demo SD image:</p> <p> </p>"},{"location":"prepare_sd/","title":"MicroSD Card Preperation","text":"<p>The Qwiic WAV Trigger Pro requires a \u00b5SD card to store and load WAV and Preset files. </p>"},{"location":"prepare_sd/#recommended-sd-cards-format","title":"Recommended SD Cards &amp; Format","text":"<p>This and other WAV Trigger boards from robertsonics interact differently with SD cards than what manufacturers typically expect. WAV Triggers rely on fast and, more importantly, reliable file access with small timeout windows. The WAV Trigger Pro firmware is only compatible with SD cards formatted to either a FAT16 or FAT32. </p> <p>We strongly recommend using cards that use one of these formats by default. If you are using a larger capacity SD card that uses another format (exFAT, etc.), you must format it to FAT32 and set the max allocation size to 32k. You can set both of these using the Qwiic Format application in Windows.</p> <p>Robertsonics has done some fairly extensive testing with his previous WAV Trigger boards and has some great write ups on SD card performance and the unique requirements of the WAV Trigger boards. These offer a few recommendations though some of the recommended cards may no longer be available or have updated versions of them:</p> <ul> <li>MicroSD Cards for Audio - 2024</li> <li>MicroSD Cards for Audio - 2021</li> </ul>"},{"location":"prepare_sd/#format-sd-card","title":"Format \u00b5SD Card","text":"<p>If you're using a brand new SD card, you may not need to format it though it may come with pre-installed files that could cause performance issues with the WAV Trigger Pro. The Quick Format option in Windows is the usually the simplest method to properly format the \u00b5SD card.</p>"},{"location":"prepare_sd/#sd-card-contents-naming-convention","title":"\u00b5SD Card Contents &amp; Naming Convention","text":"<p>The SD Card should only contain <code>.wav</code> audio files and <code>.csv</code> Preset files following the proper naming convention. Preset files, as covered in the previous section, should be named \"set_nnnn.csv\" where \"nnnn\" is a 4-digit number with leading zeroes (eg. \"set_0001.csv\" would be Preset 1). WAV files should be named \"nnnn.wav\" where \"nnnn\" is a 4-digit number with leading zeros. If you'd like, you can add a descriptor to the audio filenames by adding an underscore to the file name followed by the descriptor (eg. \"0123_piano.wav\").</p>"},{"location":"prepare_sd/#audio-file-format","title":"Audio File Format","text":"<p>If your audio files are using another format, you'll need to convert them to 16-bit, 44.1kHz mono or stereo WAV format. There's many options for converting audio files but the WAV Trigger Pro does not support WAV files with any additional header information or metadata. Some audio recording programs, such as Pro Tools, write additional information at the start of the file. An easy way to remove the unnecessary header information is to utilize Audacity. Users can use this software to export a file as WAV (Microsoft) signed 16-bit PCM and clear out the metadata containing the header infromation (i.e. title, artist, genre, etc.).</p> <p>The following video gives a brief demonstration of the Audacity export process.</p> <p> </p>"},{"location":"preset/","title":"Preset File","text":""},{"location":"preset/#preset-file-overview","title":"Preset File Overview","text":"<p>The Qwiic WAV Trigger Pro assigns functions to MIDI notes using a spreadsheet format we'll refer to as \"Presets\". These presets can be made using any spreadsheet application (Excel, Google Sheets, etc.) that can export to a <code>.csv</code> file. The Presets configure how all 127 MIDI notes function including which track to play, playback actions, pitch offset, attack/release velocity, and even to call another Preset stored on the \u00b5SD card. </p> <p>As you may imagine, the Preset contains a lot of information so we'll go into detail below on how each column in the file works.</p>"},{"location":"preset/#preset-file-naming-convention","title":"Preset File Naming Convention","text":"<p>When creating a Preset, make sure to export it to a .csv file named \"set_nnnn.csv\" where \"nnnn\" is a 4-digit number with leading zeroes. For example, a preset file named \"set_0001.csv\" would be Preset 1, \"set_0002\" would be Preset 2 and so on. On reset, the WAV Trigger Pro looks for and loads the preset \u201cset_0001.csv\u201d automatically, if present, otherwise it will initialize to a default preset.</p> <p>Functions that load presets (Column 4 - Action and Column 5 - Track/Preset) refer to the preset number in the filename. For example, setting a MIDI note to load a preset named \"set_0123.csv\" requires setting the action in Column 4 to \"Load Preset\" and the Track/Preset value in Column 5 to \"123\". </p>"},{"location":"preset/#default-preset","title":"Default Preset","text":"<p>On power up or reset, the WAV Trigger looks for and attempts to automatically load Preset 1 (set_0001.csv). If that file does not exist on the SD card then it loads an internal default preset with the following action assignments:</p> <p>MIDI Notes 1-8 have an action type 2, Trigger, Edge and set to trigger the corresponding track number with a gain of 0, center panned, attack/release time of 0ms and no flags set. This sets the eight trigger pins to toggle tracks 1-8 polyphonically, very similar to the behavior from the original WAV Trigger and Tsunami.</p> <p>MIDI Notes 9-127 have an action type 1, Play and set to play the corresponding track number with a gain of 0, center panned, attack/release time of 0ms, full velocity and gain scaling with no flags set. This sets MIDI notes 9-127 to play tracks 9-127 as velocity sensitive MIDI notes that respond to both Note-On and Note-Off messages.</p>"},{"location":"preset/#column-overview","title":"Column Overview","text":"<p>Each line in Preset files use fourteen columns that cover all MIDI notes' possible function and behavior assignments. The list below outlines each column and how to use them:</p> <ul> <li> <p>Column 1/A - Command: Assigning an action to a MIDI note number requires entering \"#NOTE\" in this column. Anything else here will cause the entire row to be considered a comment and ignored.</p> </li> <li> <p>Column 2/B - MIDI Note number (0 - 127): Each MIDI Note number may appear in a Note Action line up to 8 times in any particular order in the Preset file (any more than 8 will be ignored.) Each Action line will assign one function to the corresponding MIDI Note to be executed on Note-On/Note-Off events. In this way, a single MIDI Note can perform up to 8 actions.</p> </li> <li> <p>Column 3/C - MIDI Channel number (0 - 15): Each action can be assigned to either a specific MIDI channel or any channel (Omni). If the number in this column is 0 - 15 the action only occurs for the corresponding MIDI channel. A value of 16 sets the action to occur for any MIDI channel (Omni). Using multiple actions, a single MIDI note can play different sounds on different channels.</p> </li> <li> <p>Column 4/D - Action: There are currently 7 available actions defined. These are contained within a list at the top of the spreadsheet (within the red box) and the action field is a drop-down selection for that list. The available actions are:</p> <ul> <li> <p>Action Type 01: Play Note: This is the normal behavior of a MIDI Note. The track number set in column 5/E starts with a MIDI Note-On message with a target volume proportional to the MIDI velocity. A MIDI Note-Off commessagemand stops the track.</p> </li> <li> <p>Action Type 02: Trigger, Edge: This action ignores both MIDI velocity and the corresponding MIDI Note-Off message. A track with this action is polyphonic and mixed with any previous instance of this action's track.</p> </li> <li> <p>Action Type 03: Trigger, Level: This action ignores MIDI velocity and stops the track with the corresponding Note-Off message.</p> </li> <li> <p>Action Type 04: Trigger, Conditional: This action type ignores MIDI velocity and the track will not start if a previous instance of this track is still playing.</p> </li> <li> <p>Action Type 05: Stop Track: This action stops a track with the specified release time.</p> </li> <li> <p>Action Type 06: Stop All: This action stops all tracks currently playing.</p> </li> <li> <p>Action Type 07: Load Preset: This action loads the specified preset file in Column 5/E.</p> </li> </ul> </li> <li> <p>Column 5/E - Track/Preset: This field sets the target track number or preset number for the action specified in Column 4/D. For action types 1-6 this refers to the track number. For action type 7 this refers to the preset number. Tracks are numbered 0 to 4095, while presets are numbered 0 to 9999.</p> </li> <li> <p>Column 6/F - Pitch Offset: This value refers to the sample-rate offset applied to the track when started. Any action that causes a track to play can specify a pitch offset of -700 to +700 cents (100 cents equalling one musical semitone.) A pitch offset of 0 will cause the track to play with no offset.</p> </li> <li> <p>Columns 7/G and 8/H - Attack and Release: MIDI note attack and release time specified in milliseconds.</p> </li> <li> <p>Column 9/I - Loop Flag: A value of 1 in this column causes the track to seamlessly loop from end to beginning until it is stopped.</p> </li> <li> <p>Column 10/J - Lock Flag: The WAV Trigger Pro has a voice stealing algorithm. If when a track is started, there are no voices available, the oldest running voice will be \u201cstolen\u201d to play the new track. Putting a value of 1 in the Lock field prevents the track from having its voice stolen if this happens. This can be useful if you have a backing track that you don\u2019t want to get cut off.</p> </li> <li> <p>Column 11/K - Pitch Bend Flag: A value of 1 in this column causes the track to be modified by any MIDI Pitch Bend messages.</p> </li> <li> <p>Columns 12/L and 13/M - Min and Max Velocity: For action type 1, any MIDI Note-On message with a velocity outside this range is ignored.</p> </li> <li> <p>Column 14/N and 15/O - Min and Max Velocity Gain: For action type 1, sets the gain range scaled to the velocity range. This means the gain at the min velocity matches the min velocity gain and the gain at the max velocity matches the max velocity gain.</p> </li> <li> <p>Column 16/P - Balance (0 - 127): This value controls the Left/Right channel balance of the track. A value of 0 is Left channel only, while a value of 127 is Right channel only. A value of 64 means center panned audio between Left and Right channels.</p> </li> </ul>"},{"location":"preset/#preset-demos","title":"Preset Demos","text":"<p>Robertsonics has created a couple of sample SD card images for Keyboard and Percussion USB MIDI demos. Each image includes sets of WAV and Preset files in a ZIP download. All you need to do is download the image, unzip it and load it onto an empty and formatted \u00b5SD card and plug the card into the WAV Trigger Pro.</p>"},{"location":"preset/#keyboard-demo","title":"Keyboard Demo","text":"<p>The Keyboard demo is intended for use with a MIDI keyboard and includes three sets of instrument sounds - piano, strings and organ - over the same 3-octave range. It also includes four presets that select one or more of the instruments to be available with different performance parameters. You can download the SD image and Preset spreadsheet file from the links below:</p> <p> WAV Trigger Pro Keyboard Demo SD Image </p> <p> WAV Trigger Pro Keyboard Demo Preset Sheet </p>"},{"location":"preset/#percussion-demo","title":"Percussion Demo","text":"<p>The Percussion demo is intended for use with a velocity-sensitive pad MIDI controller to demonstrate things like velocity mapping and multiple actions per MIDI note. It includes a selection of effects, dialog and percussion. The preset file includes comments to help explain </p> <p> WAV Trigger Pro Percussion Demo SD Image </p> <p> WAV Trigger Pro Percussion Demo Preset Sheet </p>"},{"location":"qwiic_assembly/","title":"Qwiic Assembly","text":"<p>The Qwiic WAV Trigger Pro can be controlled over a Qwiic (I<sup>2</sup>C) connection with a development board using the WAV Trigger Pro Qwiic Arduino Library. The Qwiic interface works with the WAV Trigger Pro running either MIDI Device (default) or MIDI Host firmware. </p>"},{"location":"qwiic_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>Using the WAV Trigger Pro over Qwiic is simple as it just requires a connection to a Qwiic-enabled development board using a Qwiic cable. If your preferred development board does not have a Qwiic connector, you can use this Qwiic breadboard adapter cable to connect to the I<sup>2</sup>C bus.</p> <p></p>"},{"location":"resources/","title":"Resources","text":"<p>For more information about the Qwiic WAV Trigger Pro, refer to the following resources:</p> <ul> <li>Schematic</li> <li>KiCad Board Files</li> <li>Board Dimensions</li> <li>STM32 Datasheet</li> <li>STM32 Reference Manual</li> <li>STM32 Application Note</li> <li>PCM510xA Datasheet</li> <li>Keyboard Demo Files<ul> <li>Keyboard Demo SD Image</li> <li>Keyboard Demo Preset Sheet</li> </ul> </li> <li>Percussion Demo Files<ul> <li>Percussion Demo SD Image</li> <li>Percussion Demo Preset Sheet</li> </ul> </li> <li>Robertsonics' WAV Trigger Pro User Guide</li> <li>Robertsonics' Downloads</li> <li>WAV Trigger Pro Arduino Library</li> <li>GitHub Repository</li> </ul>"},{"location":"single_page/","title":"Hookup Guide","text":"<p>-- hide:   - navigation   - toc icon: fontawesome/solid/scroll</p>"},{"location":"single_page/#hookup-guide","title":"Hookup Guide","text":""},{"location":"single_page/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Qwiic WAV Trigger Pro SKU: WIG-25860 <p> <li> <p>The Qwiic WAV Trigger Pro is the latest evolution of the line of high-fidelity polyphonic audio players from robertsonics. The Qwiic WAV Trigger Pro improves on the previous versions with a more powerful processor, enhanced MIDI processing - including velocity switching and multi-timbral support - and MIDI USB Device (Default) and MIDI USB Host support, all in a smaller 1.75\" x 1.5\" footprint!  The Qwiic WAV Trigger Pro supports up to 4096 uncompressed 16-bit, 44.1kHz mono and stereo WAV files matching CD audio quality. The WAV Trigger Pro supports polyphony and can play and mix up to 24 tracks simultaneously and independently with exceptionally low latency (7ms typically). Control track playback via either 8 programmable trigger inputs, I<sup>2</sup>C (Qwiic), or MIDI (USB, Serial UART, or Qwiic). The board can function as both a USB MIDI device and host meaning if the WAV Trigger Pro has power in USB MIDI Host mode it can supply up to 500mA@5V to a connected MIDI device over USB-C allowing for USB MIDI control with no computer required.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>The Qwiic WAV Trigger Pro requires a few additional items as well as some through-hole soldering to get up and running properly. If you'd like to follow along with the examples in this tutorial, you'll want at least the following items along with a pair of corded headphones. If you'd like to follow the USB MIDI Host example, make sure you have a USB MIDI device like a MIDI Keyboard or Pad.</p> <ul> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>microSD Card with Adapter - 32GB (Class 10) COM-14832</p> <li> <p> <p>SparkFun TRRS 3.5mm Jack Breakout BOB-11570</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> <li> <p> <p>Jumper Wires - Connected 6\" (M/F, 20 pack) PRT-12794</p>"},{"location":"single_page/#qwiic-arduino-materials","title":"Qwiic &amp; Arduino Materials","text":"<p>Users who wish to use the Qwiic WAV Trigger Pro with the Qwiic ecosystem and Arduino library, you may need one or more of the following products:</p> <ul> <li> <p> <p>SparkFun RedBoard Plus DEV-18158</p> <li> <p> <p>SparkFun Qwiic Pocket Development Board - ESP32-C6 DEV-22925</p> <li> <p> <p>Flexible Qwiic Cable - 50mm PRT-17260</p> <li> <p> <p>Flexible Qwiic Cable - 200mm PRT-17258 </p>"},{"location":"single_page/#soldering-tools-accessories","title":"Soldering Tools &amp; Accessories","text":"<p>The Qwiic WAV Trigger Pro does require some through-hole soldering for the best, permanent installation and uses. Users will need to at least solder to the audio output pins as they are routed to a 0.1\"-spaced PTH header. If you need any soldering tools or materials, check out the following products: </p> <ul> <li> <p> <p>Hakko FX-888DX Soldering Station TOL-25926</p> <li> <p> <p>PINECIL Soldering Iron Kit TOL-24063</p> <li> <p> <p>Hook-up Stranded Wire - Red (22 AWG) PRT-08865</p> <li> <p> <p>Hook-up Stranded Wire - Black (22 AWG) PRT-08867</p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>Before getting started with this guide and the Qwiic WAV Trigger Pro, you may want to read through some of the tutorials linked below if you're not familiar with the concepts covered in them:</p> <ul> <li> <p> MIDI </p> </li> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section we'll take a closer look at the components on the WAV Trigger Pro (Qwiic).</p>"},{"location":"single_page/#stm32h-microcontroller","title":"STM32H Microcontroller","text":"<p>The WAV Trigger Pro uses the STM32H750VBTx central processor from ST Microelectronics<sup>\u00a9</sup>.  </p> <p></p> <p>The STM32 features a 32-bit Arm<sup>\u00ae</sup> Cortex<sup>\u00ae</sup>-M7 core with 128 Kb of Flash memory and 1Mb of RAM. It has an integrated USB converter that allows for easy updating of firmware over the USB-C connector on the board using STM's Cube Programmer tool. Updating the WAV Trigger Pro's firmware is covered in more detail in the Updating Firmware section of this guide.</p>"},{"location":"single_page/#power-inputs","title":"Power Inputs","text":"<p>The WAV Trigger Pro has three options for powering the board; USB-C, Qwiic, or dedicated through-hole pins.</p> <p></p>"},{"location":"single_page/#usb-c","title":"USB-C","text":"<p>The USB-C connector on the board provides both a serial connection along with a power input. By default, when plugging the board in over USB-C to a computer, it will appear as a USB MIDI Device. When the WAV Trigger Pro is configured to act as a USB MIDI Host and powered through the dedicated through-hole power pins, the USB-C connector can supply 500mA@5V to a connected USB MIDI device. Running the WAV Trigger Pro as a USB MIDI Host requires uploading alternate firmware as well as modifying the appropriate solder jumpers. Read on to the MIDI Host Assembly section for detailed information on this configuration.</p>"},{"location":"single_page/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board includes a pair of Qwiic connectors to integrate it into SparkFun's Qwiic ecosystem. These connectors provide both an I<sup>2</sup>C connection as well as power (3.3V) to the WAV Trigger Pro. The WAV Trigger Pro Arduino library works over I<sup>2</sup>C to control the board using an Arduino microcontroller.</p>"},{"location":"single_page/#through-hole-power-pins","title":"Through-Hole Power Pins","text":"<p>This pair of 0.1\"-spaced plated through-hole (PTH) pins labeled 5V and GND accept a supply voltage of 5V. This power input is primarily intended for running the WAV Trigger Pro as a USB MIDI Host to provide 5V/500mA to a MIDI device connected to the board's USB-C connector.</p>"},{"location":"single_page/#polyphonic-engine","title":"Polyphonic Engine","text":"<p>The operation of the WAV Trigger Pro's polyphonic engine is proprietary to Robertsonics. While we cannot go into exact details on how this works, here are some highlights of the engine's functionality:</p> <p></p> <ul> <li>Up to 4096 uncompressed 16-bit, 44.1kHz mono and stereo WAV files (CD Quality)</li> <li>Polyphonic - Play and mix up to 24 tracks independently and simultaneously with independent pitch control</li> <li>Low Latency - Timing from triggering a track to playback typically takes only 2.5ms (4ms max)</li> <li>MIDI notes can trigger up to 8 independent actions, routing tracks to any combination of outputs</li> <li>Up to 8 velocity range assignments per note to trigger alternate samples</li> <li>Each event provides independent pitch offset (in cents) allowing for true multi-sampling</li> <li>Seamless looping over arbitrary track length</li> </ul>"},{"location":"single_page/#midi-control","title":"MIDI Control","text":"<p>The WAV Trigger Pro introduces MIDI-USB host and device capabilities. The board can function as either a USB-MIDI device or USB-MIDI host. When acting as a USB-MIDI host and powered independently it can power a connected MIDI device with 500mA@5V. This means you can have complete USB-MIDI interactivity with the WAV Trigger Pro with no computer required! Do note, running the WAV Trigger Pro as a MIDI-USB host requires uploading alternate firmware as well as physically adjusting the appropriate solder jumpers. Read on to the \"MIDI Host Assembly\" section for complete instructions.</p>"},{"location":"single_page/#trigger-control","title":"Trigger Control","text":"<p>The board also includes eight independent trigger inputs routed to through-hole pins. All eight trigger pins can be individually configured. All trigger pins a 3.3V tolerant.</p>"},{"location":"single_page/#qwiic-i2c-control","title":"Qwiic (I<sup>2</sup>C) Control","text":"<p>This WAV Trigger also includes a pair of Qwiic connectors to integrate with SparkFun's Qwiic ecosystem. Users can use this in tandem with the [WAV Trigger Pro Arduino Library]((https://github.com/robertsonics/WAV_Trigger_Pro_Qwiic_Arduino_Library) to control the WAV Trigger Pro using an Arduino development board.</p>"},{"location":"single_page/#audio-output","title":"Audio Output","text":"<p>The WAV Trigger Pro has two channels for audio output routed to through-hole pins. Soldering to these pins is required for the audio output to work properly. If you have never soldered before or want some tips, check out our How to Solder: Through Hole Soldering Tutorial.</p>"},{"location":"single_page/#presets","title":"Presets","text":"<p>The WAV Trigger Pro introduces Presets! Presets are managed through spreadsheet .csv files (Excel or Google Sheets) loaded onto a connected \u00b5SD card which describe up to 8 actions per MIDI note, based on channel and velocity. Each action can start and independent track with individual gain, balance, attack, release, and pitch. This allows multiple sounds to be mixed in performance. If you've used previous WAV Triggers before, these Preset files take the place of the configuration app. You can have multiple presets stored on the file that you can switch between. Read on to the Preset File section of this guide for detailed information on how to setup and use these files.</p>"},{"location":"single_page/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The \u00b5SD card holder on the WAV Trigger Pro is on the back/reverse side of the board. This card is used to store <code>.wav</code> audio files and preset <code>.csv</code> files. </p> <p></p>"},{"location":"single_page/#pth-pins","title":"PTH Pins","text":"<p>The Qwiic WAV Trigger Pro has several plated through-hole (PTH) headers around the board. Let's take a closer look at each of these headers and how they work.</p> <p> \"Click to enlarge\"</p>"},{"location":"single_page/#trigger-pins","title":"Trigger Pins","text":"<p>The board has eight PTH trigger pins mapped to the first 8 MIDI notes meaning activating Trigger pin 1 sends a MIDI Note-on message for note 1 and releasing Trigger pin 1 sends a MIDI-Note-off message for note 1. The trigger pins pulled HIGH to 3.3V internally and are active LOW. Pulling them to ground through either a button, switch, relay, or active output (eg. microcontroller I/O pin) activates the trigger. </p> <p>All trigger pins are 3.3V tolerant so if you're using an active output to control the triggers make sure the inactive state of the triggers does not exceed 3.3V. Users can adjust how these trigger inputs behave in the Preset file. Read on to the Preset File of this guide for more information on configuring the triggers and other MIDI note behavior.</p>"},{"location":"single_page/#audio-output_1","title":"Audio Output","text":"<p>The WAV Trigger Pro has two channel (stereo) output routed only to PTH pins labeled L, R, and G.</p>"},{"location":"single_page/#serialuart-boot-pins","title":"Serial/UART &amp; Boot Pins","text":"<p>The STM32's serial UART (RX/TX) pins and BOOT pin are routed to PTHs. Connecting the BOOT pin to ground puts the STM32 into BOOT mode for uploading new firmware to the board over either USB-C or a serial connection. The BOOT pin is routed directly next to a Ground pin to make closing this pin jumper easy. The UART pins operate at 3.3V logic.</p> <p>The WAV Trigger Pro firmware (both Device &amp; Host) also sets these pins up to be used with as a serial console interface  over a serial terminal like the Arduino Serial monitor. The serial console accepts ASCII commands to as play, loop and stop tracks, loading presets and also return device status which can help provide important information about a connected \u00b5SD card's performance. The serial console interface works simultaneously with everything else running on the board. Read on to the Audio Output &amp; Serial Console Interface section of this guide for more information.</p>"},{"location":"single_page/#stm-swd-header","title":"STM SWD Header","text":"<p>The board includes a 5x2 Software Debug (SWD) header for low-level debugging of the STM32. The header connects to the STM32's SWD pins: SWDIO, SWCLK &amp; SWO. For more information about using the SWD interface, refer to the STM32's Datasheet, Reference Manual &amp; Hardware Development App Note.</p>"},{"location":"single_page/#power-input","title":"Power Input","text":"<p>When not using USB or Qwiic for power, connect a 5V supply to power the board. </p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board has two LEDs on board labeled PWR and STAT. </p> <p></p> <p>The red PWR LED indicates whenever the board is powered. The green STAT LED provides helpful information on the current status of the WAV Trigger. On reset, the STAT LED blinks in the following patterns:</p> <ul> <li>3 Quick Blinks - No problems. Both the \u00b5SD card and WAV files were found<ul> <li>After the initial pattern, the STAT LED will flash quickly every couple seconds as a \"Heartbeat\"</li> <li>Goes solid while audio is playing</li> </ul> </li> <li>1 Long then 1 Short Blink (Repeating) - No \u00b5SD card found</li> <li>1 Long then 2 Short Blinks (Repeating) - File system error</li> <li>1 Long then 3 Short Blinks (Repeating) - No WAV Fils found on \u00b5SD card</li> <li>1 Long then 4 Short Blinks (Repeating) - Memory error</li> </ul>"},{"location":"single_page/#solder-jumpers","title":"Solder Jumpers","text":"<p>The WAV Trigger Pro has six solder jumpers labeled HST/DEV, VBUS, ANLG, I<sup>2</sup>C and LED. </p> <p></p> <p>The list below outlines their names, functionality, default states and any notes on their use.</p> <ul> <li>HST/DEV - This pair of three-way solder jumpers work with the VBUS jumper to switch the functionality of USB-MIDI control between acting as a Device or Host. The HST/DEV jumpers default to set the board to act as a MIDI Device.<sup>1</sup></li> <li>VBUS - This jumper controls whether the USB-C connector accepts or supplies 5V. It is OPEN by default to use the USB-C connector to receive power from a USB-C source. Closing it nets the output from VIN (5V/GND PTHs) to VUSB so the USB-C connector outputs 5V to a device connected to it.<sup>1</sup> </li> <li>ANLG - This jumper ties the audio output's ground to the common ground on the board. It is CLOSED by default. Open it to isolate the audio's ground from the rest of the WAV Trigger Pro's ground plane.</li> <li>I<sup>2</sup>C - Pulls the SDA/SCL lines to 3.3V through a pair of 2k\u03a9 resistors. It is CLOSED by default. Open it to disable pullup on the I<sup>2</sup>C bus.</li> <li>LED - Completes the Power LED circuit. CLOSED by default. Open it to disable the Power LED to help reduce the current draw.</li> </ul> <p>Note 1: HST/DEV &amp; VBUS Jumpers</p> <p>How to use and set these jumpers is covered in more detail in the MIDI Host Assembly section of this guide.</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The Qwiic WAV Trigger Pro measures 1.5\" x 1.75\" (38.10mm x 44.45mm) with four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"single_page/#preset-file","title":"Preset File","text":""},{"location":"single_page/#preset-file-overview","title":"Preset File Overview","text":"<p>The Qwiic WAV Trigger Pro assigns functions to MIDI notes using a spreadsheet format we'll refer to as \"Presets\". These presets can be made using any spreadsheet application (Excel, Google Sheets, etc.) that can export to a <code>.csv</code> file. The Presets configure how all 127 MIDI notes function including which track to play, playback actions, pitch offset, attack/release velocity, and even to call another Preset stored on the \u00b5SD card. </p> <p>As you may imagine, the Preset contains a lot of information so we'll go into detail below on how each column in the file works.</p>"},{"location":"single_page/#preset-file-naming-convention","title":"Preset File Naming Convention","text":"<p>When creating a Preset, make sure to export it to a .csv file named \"set_nnnn.csv\" where \"nnnn\" is a 4-digit number with leading zeroes. For example, a preset file named \"set_0001.csv\" would be Preset 1, \"set_0002\" would be Preset 2 and so on. On reset, the WAV Trigger Pro looks for and loads the preset \u201cset_0001.csv\u201d automatically, if present, otherwise it will initialize to a default preset.</p> <p>Functions that load presets (Column 4 - Action and Column 5 - Track/Preset) refer to the preset number in the filename. For example, setting a MIDI note to load a preset named \"set_0123.csv\" requires setting the action in Column 4 to \"Load Preset\" and the Track/Preset value in Column 5 to \"123\". </p>"},{"location":"single_page/#default-preset","title":"Default Preset","text":"<p>On power up or reset, the WAV Trigger looks for and attempts to automatically load Preset 1 (set_0001.csv). If that file does not exist on the SD card then it loads an internal default preset with the following action assignments:</p> <p>MIDI Notes 1-8 have an action type 2, Trigger, Edge and set to trigger the corresponding track number with a gain of 0, center panned, attack/release time of 0ms and no flags set. This sets the eight trigger pins to toggle tracks 1-8 polyphonically, very similar to the behavior from the original WAV Trigger and Tsunami.</p> <p>MIDI Notes 9-127 have an action type 1, Play and set to play the corresponding track number with a gain of 0, center panned, attack/release time of 0ms, full velocity and gain scaling with no flags set. This sets MIDI notes 9-127 to play tracks 9-127 as velocity sensitive MIDI notes that respond to both Note-On and Note-Off messages.</p>"},{"location":"single_page/#column-overview","title":"Column Overview","text":"<p>Each line in Preset files use fourteen columns that cover all MIDI notes' possible function and behavior assignments. The list below outlines each column and how to use them:</p> <ul> <li> <p>Column 1/A - Command: Assigning an action to a MIDI note number requires entering \"#NOTE\" in this column. Anything else here will cause the entire row to be considered a comment and ignored.</p> </li> <li> <p>Column 2/B - MIDI Note number (0 - 127): Each MIDI Note number may appear in a Note Action line up to 8 times in any particular order in the Preset file (any more than 8 will be ignored.) Each Action line will assign one function to the corresponding MIDI Note to be executed on Note-On/Note-Off events. In this way, a single MIDI Note can perform up to 8 actions.</p> </li> <li> <p>Column 3/C - MIDI Channel number (0 - 15): Each action can be assigned to either a specific MIDI channel or any channel (Omni). If the number in this column is 0 - 15 the action only occurs for the corresponding MIDI channel. A value of 16 sets the action to occur for any MIDI channel (Omni). Using multiple actions, a single MIDI note can play different sounds on different channels.</p> </li> <li> <p>Column 4/D - Action: There are currently 7 available actions defined. These are contained within a list at the top of the spreadsheet (within the red box) and the action field is a drop-down selection for that list. The available actions are:</p> <ul> <li> <p>Action Type 01: Play Note: This is the normal behavior of a MIDI Note. The track number set in column 5/E starts with a MIDI Note-On message with a target volume proportional to the MIDI velocity. A MIDI Note-Off commessagemand stops the track.</p> </li> <li> <p>Action Type 02: Trigger, Edge: This action ignores both MIDI velocity and the corresponding MIDI Note-Off message. A track with this action is polyphonic and mixed with any previous instance of this action's track.</p> </li> <li> <p>Action Type 03: Trigger, Level: This action ignores MIDI velocity and stops the track with the corresponding Note-Off message.</p> </li> <li> <p>Action Type 04: Trigger, Conditional: This action type ignores MIDI velocity and the track will not start if a previous instance of this track is still playing.</p> </li> <li> <p>Action Type 05: Stop Track: This action stops a track with the specified release time.</p> </li> <li> <p>Action Type 06: Stop All: This action stops all tracks currently playing.</p> </li> <li> <p>Action Type 07: Load Preset: This action loads the specified preset file in Column 5/E.</p> </li> </ul> </li> <li> <p>Column 5/E - Track/Preset: This field sets the target track number or preset number for the action specified in Column 4/D. For action types 1-6 this refers to the track number. For action type 7 this refers to the preset number. Tracks are numbered 0 to 4095, while presets are numbered 0 to 9999.</p> </li> <li> <p>Column 6/F - Pitch Offset: This value refers to the sample-rate offset applied to the track when started. Any action that causes a track to play can specify a pitch offset of -700 to +700 cents (100 cents equalling one musical semitone.) A pitch offset of 0 will cause the track to play with no offset.</p> </li> <li> <p>Columns 7/G and 8/H - Attack and Release: MIDI note attack and release time specified in milliseconds.</p> </li> <li> <p>Column 9/I - Loop Flag: A value of 1 in this column causes the track to seamlessly loop from end to beginning until it is stopped.</p> </li> <li> <p>Column 10/J - Lock Flag: The WAV Trigger Pro has a voice stealing algorithm. If when a track is started, there are no voices available, the oldest running voice will be \u201cstolen\u201d to play the new track. Putting a value of 1 in the Lock field prevents the track from having its voice stolen if this happens. This can be useful if you have a backing track that you don\u2019t want to get cut off.</p> </li> <li> <p>Column 11/K - Pitch Bend Flag: A value of 1 in this column causes the track to be modified by any MIDI Pitch Bend messages.</p> </li> <li> <p>Columns 12/L and 13/M - Min and Max Velocity: For action type 1, any MIDI Note-On message with a velocity outside this range is ignored.</p> </li> <li> <p>Column 14/N and 15/O - Min and Max Velocity Gain: For action type 1, sets the gain range scaled to the velocity range. This means the gain at the min velocity matches the min velocity gain and the gain at the max velocity matches the max velocity gain.</p> </li> <li> <p>Column 16/P - Balance (0 - 127): This value controls the Left/Right channel balance of the track. A value of 0 is Left channel only, while a value of 127 is Right channel only. A value of 64 means center panned audio between Left and Right channels.</p> </li> </ul>"},{"location":"single_page/#preset-demos","title":"Preset Demos","text":"<p>Robertsonics has created a couple of sample SD card images for Keyboard and Percussion USB MIDI demos. Each image includes sets of WAV and Preset files in a ZIP download. All you need to do is download the image, unzip it and load it onto an empty and formatted \u00b5SD card and plug the card into the WAV Trigger Pro.</p>"},{"location":"single_page/#keyboard-demo","title":"Keyboard Demo","text":"<p>The Keyboard demo is intended for use with a MIDI keyboard and includes three sets of instrument sounds - piano, strings and organ - over the same 3-octave range. It also includes four presets that select one or more of the instruments to be available with different performance parameters. You can download the SD image and Preset spreadsheet file from the links below:</p> <p> WAV Trigger Pro Keyboard Demo SD Image </p> <p> WAV Trigger Pro Keyboard Demo Preset Sheet </p>"},{"location":"single_page/#percussion-demo","title":"Percussion Demo","text":"<p>The Percussion demo is intended for use with a velocity-sensitive pad MIDI controller to demonstrate things like velocity mapping and multiple actions per MIDI note. It includes a selection of effects, dialog and percussion. The preset file includes comments to help explain </p> <p> WAV Trigger Pro Percussion Demo SD Image </p> <p> WAV Trigger Pro Percussion Demo Preset Sheet </p>"},{"location":"single_page/#microsd-card-preperation","title":"MicroSD Card Preperation","text":"<p>The Qwiic WAV Trigger Pro requires a \u00b5SD card to store and load WAV and Preset files. </p>"},{"location":"single_page/#recommended-sd-cards-format","title":"Recommended SD Cards &amp; Format","text":"<p>This and other WAV Trigger boards from robertsonics interact differently with SD cards than what manufacturers typically expect. WAV Triggers rely on fast and, more importantly, reliable file access with small timeout windows. The WAV Trigger Pro firmware is only compatible with SD cards formatted to either a FAT16 or FAT32. </p> <p>We strongly recommend using cards that use one of these formats by default. If you are using a larger capacity SD card that uses another format (exFAT, etc.), you must format it to FAT32 and set the max allocation size to 32k. You can set both of these using the Qwiic Format application in Windows.</p> <p>Robertsonics has done some fairly extensive testing with his previous WAV Trigger boards and has some great write ups on SD card performance and the unique requirements of the WAV Trigger boards. These offer a few recommendations though some of the recommended cards may no longer be available or have updated versions of them:</p> <ul> <li>MicroSD Cards for Audio - 2024</li> <li>MicroSD Cards for Audio - 2021</li> </ul>"},{"location":"single_page/#format-sd-card","title":"Format \u00b5SD Card","text":"<p>If you're using a brand new SD card, you may not need to format it though it may come with pre-installed files that could cause performance issues with the WAV Trigger Pro. The Quick Format option in Windows is the usually the simplest method to properly format the \u00b5SD card.</p>"},{"location":"single_page/#sd-card-contents-naming-convention","title":"\u00b5SD Card Contents &amp; Naming Convention","text":"<p>The SD Card should only contain <code>.wav</code> audio files and <code>.csv</code> Preset files following the proper naming convention. Preset files, as covered in the previous section, should be named \"set_nnnn.csv\" where \"nnnn\" is a 4-digit number with leading zeroes (eg. \"set_0001.csv\" would be Preset 1). WAV files should be named \"nnnn.wav\" where \"nnnn\" is a 4-digit number with leading zeros. If you'd like, you can add a descriptor to the audio filenames by adding an underscore to the file name followed by the descriptor (eg. \"0123_piano.wav\").</p>"},{"location":"single_page/#audio-file-format","title":"Audio File Format","text":"<p>If your audio files are using another format, you'll need to convert them to 16-bit, 44.1kHz mono or stereo WAV format. There's many options for converting audio files but the WAV Trigger Pro does not support WAV files with any additional header information or metadata. Some audio recording programs, such as Pro Tools, write additional information at the start of the file. An easy way to remove the unnecessary header information is to utilize Audacity. Users can use this software to export a file as WAV (Microsoft) signed 16-bit PCM and clear out the metadata containing the header infromation (i.e. title, artist, genre, etc.).</p> <p>The following video gives a brief demonstration of the Audacity export process.</p> <p> </p>"},{"location":"single_page/#updating-firmware","title":"Updating Firmware","text":"<p>The Qwiic WAV Trigger Pro comes pre-loaded with firmware to use it as a MIDI device but, as covered previously, the WAV Trigger Pro can be used as either a MIDI device or MIDI host with the approrpiate firmware. In the future, there may be updates to the WAV Trigger Pro's firmware users can upload to the board if necessary. In this section we'll go over how to upload the MIDI Host firmware to the board but these steps also work for updating or reverting firmware versions.</p>"},{"location":"single_page/#stm32-cubeprogrammer-software","title":"STM32 CubeProgrammer Software","text":"<p>Uploading new firmware is best done using the STM32 CubeProgrammer software. You can upload new firmware to the board over USB-C, USB-to-Serial converter like the Serial Basic Breakout - 3.3V USB-C connected to the serial PTH pins, or with an STLink debugger and the SWD header. We strongly recommend uploading over USB since all you need is a USB-C cable, closing the BOOT jumper/tying BOOT to GND, and a computer with the STM32 Cube Programmer software. This guide only covers uploading new firmware over USB-C.</p> <p>Start by downloading the CubeProgrammer software for your operating system from this page. Note, downloading does require submitting a valid e-mail and clicking a confirmation link sent to that e-mail. Once downloaded, follow the installation instructions and then open Cube Programmer and you should be greeted by a screen similar to the image below:</p> <p></p>"},{"location":"single_page/#updloading-new-wav-trigger-firmware","title":"Updloading New WAV Trigger Firmware","text":"<p>All versions of the WAV Trigger Pro firmware are hosted on robertsonics' downloads page under the \"WAV Trigger Pro\" header. The WAV Trigger Pro ships with the MIDI Device Firmware so let's take a look at uploading the MIDI Host Firmware.</p>"},{"location":"single_page/#midi-host-firmware","title":"MIDI Host Firmware","text":"<p>Start by downloading the MIDI Host firmware from robertsonics' downloads page. Take note of where that downloads to as we'll need to direct the STM32 CubeProgrammer software to that file.</p>"},{"location":"single_page/#boot-jumper","title":"BOOT Jumper","text":"<p>Prior to connecting the WAV Trigger Pro to your computer, close the BOOT PTH jumper (either using headers and a jumper connector/jumper wire or simply temporarily pulling BOOT to GND) to set the STM32 into BOOT Mode. The board should stay in BOOT mode until reset or power cycle. The photo below shows the BOOT jumper closed using a jumper wire plugged into male headers on the board:</p> <p></p>"},{"location":"single_page/#upload-new-firmware","title":"Upload New Firmware","text":"<p>With the board in BOOT mode, return to the Cube Programmer software and switch to the \"Erasing &amp; Programming\" view by clicking the second icon on the left side of the window. Next, either enter the filepath for the new firmware or click \"Browse\" to naivgate to the firmware file. On the right side of the window, select \"USB\" on the drop-down menu for programmer type. The USB port should automatically detect which port the WAV Trigger is on but if not, click the refresh button and manually select the port, then click \"Connect\".</p> <p></p> <p>Make sure everything is configured properly and then click \"Start Programming\" to begin uploading the new firmware. This should take only a few seconds and once it's complete, disconnect the BOOT jumper (if needed) and press the RESET button. The WAV Trigger Pro should now appear as a USB audio device.</p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#audio-output-serial-console","title":"Audio Output &amp; Serial Console","text":""},{"location":"single_page/#audio-output-pins-required","title":"Audio Output Pins (Required)","text":"<p>The audio output of the WAV Trigger Pro is routed to three 0.1\"-spaced headers labeled L, G and R. This requires some through-hole soldering of either wires or headers to connect to your preferred audio output. For the purposes of this guide we'll be soldering headers to these pins to connect to a SparkFun TRRS 3.5MM Jack Breakout to plug a pair of headphones into.</p> <p>The WAV Trigger Pro requires soldering to these pins regardless of how it is configured and used so make sure to complete this step at some point during your preferred assembly.</p>"},{"location":"single_page/#soldering","title":"Soldering","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>Start by locating the three-pin PTH header with the labels R, G and L. Depending on whether you prefer a permanent soldered connection or something removeable, solder either wire or male/female headers to these pins like the photo below shows with male headers soldered:</p> <p></p> <p>If you're using the TRRS Breakout like we are, make sure to solder male/female headers or wire to the pins on that breakout like this:</p> <p></p>"},{"location":"single_page/#wiring","title":"Wiring","text":"<p>Next connect the TRRS Breakout (or your preferred audio output) to the WAV Trigger's audio pins. Make the following connections if you're connecting the WAV Trigger to the TRRS 3.5mm Breakout:</p> WAV Trigger Pro TRR Breakout Color R RING1 RED G SLEEVE BLACK L TIP YELLOW <p></p>"},{"location":"single_page/#serial-console-interface","title":"Serial Console Interface","text":"<p>The WAV Trigger Pro features a serial console interface that works over the board's RX/TX pins (@3.3V Logic) allowing users to connect a USB-to-Serial converter like the Serial Basic Breakout - 3.3V USB-C to send and receive information over that serial connection. The serial console works in all WAV Trigger Pro assembly options we cover in the following sections to provide helpful information about and control of the board.</p>"},{"location":"single_page/#serial-assembly","title":"Serial Assembly","text":"<p>Connect to the serial console interface using the TX/RX and GND pins on the WAV Trigger Pro making sure to use either a 3.3V serial converter like the one linked above or by properly level shifting one that runs at a different logic to 3.3V. The table and photo below outline the connections between the WAV Trigger and Serial Basic Breakout - 3.3V:</p> WAV Trigger Pro Serial Basic Color TX RX ORANGE RX TX GREEN G GND BLACK <p></p> <p>After connecting the boards together, connect the Serial Basic to your computer over USB and connect the WAV Trigger Pro either over USB-C or another of the power inputs (Qwiic, 5V). Next, open the serial monitor in the Arudino IDE (or if you prefer, another terminal program) at 57.6k baud with Carriage Return line ending enabled. </p> <p>Next, type in \"help\" (enter this and all other commands in all lowercase) and it will print out a list of available commands along with any available parameters to customize the command. Commands with just one parameter can be sent with a single space between the command and parameter. For commands with multiple parameters, separate the command and parameters using a comma. The list below outlines each command and what it does:</p> <ul> <li>help - Displays the available commands and their parameters</li> <li>stat - Returns a string that includes the WAV Trigger Pro's firmware version and build info as well as info about the \u00b5SD card currently in the board</li> <li>play - Plays the specified track number (if it exists). If this command is sent with just one parameter the track plays at full volume, center panned, 0 pitch offset, attack and release times of 0ms and is not looped or locked. Use the optional additional parameters outlined in the \"help\" menu to customize the playback.</li> <li>stop - If sent with a track number, this stops the track immediately. The track fades out over the specified number of milliseconds before stopping if sent with a release value. If no track number is sent, this stops all tracks immediately.</li> <li>gain - Sets the output attenuation of the board.</li> <li>v - Returns the number of currently active voices.</li> <li>sd - When sent with no parameter, this returns the current longest \u00b5SD block read in microseconds since the WAV Trigger Pro was powered on, reset or the value was reset. If sent with a parameter of 0, this resets the value manually.</li> <li>test - This command will stop the audio engine and start a block read timing test of the installed microSD card. The optional test count parameter can be used to specify the number of block read cycles in the test. If used with no parameter, the test will perform 100,000 block read cycles. It\u2019s important to keep in mind that the test will only read blocks actually allocated to .wav files, so the more .wav files are on your card, the more of the card will be tested. While the test is running, a command of \u201cr\u201d can be used to see partial results, or \u201cs\u201d to stop the test prematurely. The audio engine will be restarted when the test finished or is stopped. For a detailed overview and discussion of the test performed here, refer to this article</li> </ul>"},{"location":"single_page/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>The Qwiic WAV Trigger Pro can be controlled over a Qwiic (I<sup>2</sup>C) connection with a development board using the WAV Trigger Pro Qwiic Arduino Library. The Qwiic interface works with the WAV Trigger Pro running either MIDI Device (default) or MIDI Host firmware. </p>"},{"location":"single_page/#qwiic-assembly_1","title":"Qwiic Assembly","text":"<p>Using the WAV Trigger Pro over Qwiic is simple as it just requires a connection to a Qwiic-enabled development board using a Qwiic cable. If your preferred development board does not have a Qwiic connector, you can use this Qwiic breadboard adapter cable to connect to the I<sup>2</sup>C bus.</p> <p></p>"},{"location":"single_page/#trigger-input-assembly","title":"Trigger Input Assembly","text":""},{"location":"single_page/#preparing-trigger-pins","title":"Preparing Trigger Pins","text":"<p>The WAV Trigger Pro has eight trigger pins routed to 0.1\"-spaced headers that can be used to trigger MIDI playback for the first eight MIDI notes defined by the Preset file. If you're using these pins we recommend soldering either wire to whatever input you decide to use (button, switch, etc.) or if you'd like a removeable connection you can solder headers to these pins and use jumper wires to connect to the trigger inputs.</p> <p></p>"},{"location":"single_page/#trigger-breadboard-assembly","title":"Trigger Breadboard Assembly","text":"<p>For the purposes of this guide, we wired the first four trigger inputs to four push-buttons on a breadboard for a quick demo on using these inputs. Make sure to create a common ground by connecting a wire from one of the WAV Trigger Pro's ground pins to the ground rail on the breadboard and then wire each button to a trigger pin and the breadboard's ground rail like the photo below shows: </p> <p></p>"},{"location":"single_page/#midi-device-assembly","title":"MIDI Device Assembly","text":"<p>With the default firmware, the WAV Trigger Pro acts as a MIDI Device and can be controlled from a MIDI Host over USB. Simply plug the board into your keyboard or other MIDI controller and start playing. You can also use your computer with a Digital Audio Workstation (DAW) software like MIDI-OX to route incoming MIDI messages from your keyboard to the WAV Trigger Pro.</p> <p>[]</p> <p>This video from robertsonics shows how to use the Qwiic WAV Triger Pro as a MIDI Device connected to a MIDI keyboard through a PC with his Keyboard Demo SD image:</p> <p> </p>"},{"location":"single_page/#midi-host-assembly","title":"MIDI Host Assembly","text":""},{"location":"single_page/#midi-host-firmware_1","title":"MIDI Host Firmware","text":"<p>Running the WAV Trigger Pro as a MIDI USB Host requires uploading the proper firmware. Before setting up the WAV Trigger Pro to act as a MIDI Host, refer to the Updating Firmware section for detailed instructions on uploading the MIDI Host firmware. </p>"},{"location":"single_page/#hardware-adjustments","title":"Hardware Adjustments","text":"<p>Now we need to adjust the HST/DEV solder jumpers to configure the board to act as a USB Host. Locate these jumpers on the underside of the board and sever the trace connecting the \"Center\" and \"Right\" pads and then carefully solder the \"Center\" and \"Left\" pads together. Next, close the VBUS jumper by soldering the two pads together. After adjusting these jumpers your board should look similar to the photo below:</p> <p></p> <p>Next, prepare to connect the power supply for the MIDI assembly by either soldering wires directly to the 5V and GND pins or soldering headers to these pins for a removeable power connection. We opted for headers to make a temporary power connection shown in the photo below:</p> <p></p>"},{"location":"single_page/#completed-assembly","title":"Completed Assembly","text":"<p>Now that the WAV Trigger Pro is set up to act as a MIDI host, connect your MIDI device to the WAV Trigger Pro over USB-C. We used this USB MIDI Keyboard connected to the WAV Trigger Pro using a USB Type-C to USB Type-B cable. With that plugged in, connect the WAV Trigger Pro to a 5V power supply and it should end up looking something like this:</p> <p></p>"},{"location":"single_page/#drumpad-demo-video","title":"Drumpad Demo Video","text":"<p>The video below by robersonics gives a short rundown on using the Qwiic WAV Trigger Pro as a MIDI Host to a MIDI drumpad using his Percussion Demo SD image:</p> <p> </p>"},{"location":"single_page/#wav-trigger-pro-qwiic-arduino-library","title":"WAV Trigger Pro Qwiic Arduino Library","text":""},{"location":"single_page/#library-installation","title":"Library Installation","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"single_page/#wav-trigger-pro-qwiic-arduino-library_1","title":"WAV Trigger Pro Qwiic Arduino Library","text":"<p>The WAV Trigger Pro Qwiic Arduino Library allows you to control the audio playback on the WAV Trigger Pro over a Qwiic connection to an Arduino development board. Users can download and install the library through the Arduino Library Manager by searching for \"WAV Trigger Pro  Qwiic\" and selecting the latest version. If you prefer to manually install the library, download a ZIP of it by clicking the button below:</p> <p> WAV Trigger Pro Qwiic Arduino Library (ZIP) </p> <p>With the library installed, let's take a closer look at the examples included in it.</p>"},{"location":"single_page/#examples","title":"Examples","text":""},{"location":"single_page/#required-audio-files","title":"Required Audio Files","text":"<p>The examples included in the WAV Trigger Pro Qwiic library assume users have an SD card with the demo tracks loaded onto it. You can download a copy of the audio tracks from the link below:</p> <p> WAV Trigger Pro Arduino Example Sounds </p> <p>The Arduino examples do not require a preset, just the specific tracks included in the link above. Just download these tracks, unzip the files and load them onto your \u00b5SD card and you're ready to get started with the Aruino examples.</p>"},{"location":"single_page/#code-to-note","title":"Code to Note","text":"<p>All four examples include similar setups to initialize the WAV Trigger Pro on the I<sup>2</sup>C bus, return the firmware version string and number of available audio tracks. All of these steps have a message printed out over serial so to view them open the Arduino serial monitor with the baud set to 9600 to see these messages. If any of these fail, the code will print out \"WAV Trigger Pro response not available\".</p>"},{"location":"single_page/#example-1-loop-track","title":"Example 1 - Loop Track","text":"<p>The first example demonstrates how to loop a single track (in this case, a 440Hz sine wave) continuously. Open the example by navigating in Arduino to \"File &gt; Examples &gt; SparkFun WAV Trigger Pro Qwiic &gt; Example_01_Loop_Track\" or copy the code below into a blank sketch. </p> Example 1 - Loop Track <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 1\n//               Loop a track\n// Date Created: 1/6/2025\n//\n//     Comments: This example starts a single track looping.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 500\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n\n  // Start the A440 sine wave looping, -20dB, center, 1 second attack.\n  wtp.trackPlayPoly(100, -20, BALANCE_MID, 1000, 0, LOOP_FLAG);\n\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre> <p>The example initializes the WAV Trigger Pro over I<sup>2</sup>C along with the other checks outlined above and then plays the sine wave file on loop at -20dB in stereo (centered), with a 1 second attack using the command: <code>wtp.trackPlayPoly(100, -20, BALANCE_MID, 1000, 0, LOOP_FLAG);</code></p>"},{"location":"single_page/#example-2-play-tracks","title":"Example 2 - Play Tracks","text":"<p>The second example demonstrates how to loop through a sequence of tracks. It continuously plays the eight spoken number tracks in sequential order alternating output between the left and right audio channels.</p> Example 2 - Play Tracks <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 2\n//               Playing tracks\n// Date Created: 1/3/2025\n//\n//     Comments: This example continuously plays the eight spoken number\n//               tracks in order, to alternating left right output channels.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 500\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nunsigned long gLastPollMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\nint gNumActiveVoices = 0;\nint gTrackNum;\nint gBalance;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n  gLastPollMs = gMsTick;\n  gTrackNum = 0;\n  gBalance = 0;\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Play next track when the previous is finished\n  if ((gMsTick - gLastPollMs) &gt; POLLING_PERIOD_MS) {\n    gLastPollMs = gMsTick;\n\n    // Wait for no tracks playing\n    gNumActiveVoices = wtp.getNumActiveVoices();\n    if (gNumActiveVoices == 0) {\n      if (++gTrackNum &gt; 8)\n        gTrackNum = 1;\n\n      Serial.print(\"Play track: \");\n      Serial.print(gTrackNum);\n      Serial.print(\"\\n\");\n\n      wtp.trackPlayPoly(gTrackNum, 0, gBalance, 0, 0, 0);\n\n      // Next track should be to the opposite channel\n      if (gBalance &gt; 0)\n        gBalance = 0;\n      else\n        gBalance = 127;\n    }\n  }\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 3 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"single_page/#example-3-mix-tracks","title":"Example 3 - Mix Tracks","text":"<p>The third example shows how to mix several tracks to play together. It starts the mix with an ambient music track, then plays a dialog track followed by a fade into a second music track.</p> Example 3 - Mix Tracks <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 3\n//               Mixing tracks\n// Date Created: 1/3/2025\n//\n//     Comments: This example combines music and dialog tracks.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 100\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nunsigned long gLastPollMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\nint gNumActiveVoices = 0;\nint gDelayCount = 0;\nint gState = 0;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n  gLastPollMs = gMsTick;\n  gDelayCount = 10;\n  gState = 0;\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Proceed to the next state when the time comes\n  if ((gMsTick - gLastPollMs) &gt; POLLING_PERIOD_MS) {\n    gLastPollMs = gMsTick;\n\n    // Process according to state\n    switch (gState) {\n\n      // State 0: start the ambient music\n      case 0:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Starting music 1\");\n          wtp.trackPlayPoly(102, 0, BALANCE_MID, 0, 0, 0);\n          gState++;\n          gDelayCount = 60;  // Delay 6 seconds\n        }\n        break;\n\n      // State 1: start dialog 2 track\n      case 1:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Starting dialog 1\");\n          wtp.trackPlayPoly(105, 0, BALANCE_MID, 0, 0, 0);\n          gState++;\n        }\n        break;\n\n      // State 2: wait for dialog track to finish\n      case 2:\n        if (wtp.trackGetStatus(105) == 0) {\n          Serial.println(\"Cross-fading to music 2 \");\n          wtp.trackPlayPoly(103, 0, BALANCE_MID, 4000, 0, 0);\n          gState++;\n          gDelayCount = 20;  // Delay 1 second\n        }\n        break;\n\n      // State 3: crossfade to music 2\n      case 3:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          wtp.trackStop(102, 4000);\n          gState++;\n          gDelayCount = 30;\n        }\n        break;\n\n      // Do nothing\n      default:\n        break;\n    }\n  }\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 3 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"single_page/#example-4-midi","title":"Example 4 - MIDI","text":"<p>The fourth example demonstrates how to use MIDI commands to play tracks on the WAV Trigger Pro. The example cycles between playing a combination of tracks to create a piano chord, percussion tracks and a second piano chord.</p> Example 4 - MIDI <pre><code>// ****************************************************************************\n//       Sketch: WAV Trigger Pro Qwiic Library Example 3\n//               Using MIDI\n// Date Created: 1/3/2025\n//\n//     Comments: This example uses MIDI to play tracks.\n//\n//     Requires: The WAV Trigger Pro Arduino example tracks should be\n//               installed on the microSD card:\n//\n//        Tracks  1 - 8: Spoken numbers\n//       Tracks 48 - 84: Piano notes\n//            Track 100: Stereo A440 Sine Wave, 8 secs\n//            Track 101: Mono 1K Sine Wave, 8 secs\n//            Track 102: Stereo ambient music\n//            Track 103: Stereo acoustic guitar\n//            Track 104: Dialog 1\n//            Track 105: Dialog 2\n//     Tracks 200 - 208: EDM percussion\n//\n// ****************************************************************************\n\n#include \"WAVTriggerPro.h\"\n\n#define LED 13  // Our LED\n\n#define HEARTBEAT_PERIOD_MS 2000\n#define POLLING_PERIOD_MS 100\n\n#define TEMPO_PERIOD 10\n\n#define MIDI_NOTE_ON 0x90\n#define MIDI_NOTE_OFF 0x80\n\n#define NOTE_01 50\n#define NOTE_02 54\n#define NOTE_03 57\n\n#define NOTE_11 49\n#define NOTE_12 52\n#define NOTE_13 56\n\n#define NOTE_21 115\n#define NOTE_22 112\n\n\n// ****************************************************************************\n// Global variables\n\nWAVTriggerPro wtp;  // Our WAV Trigger Pro object\n\nunsigned long gMsTick;\nunsigned long gLastFlashMs;\nunsigned long gLastPollMs;\nint gLedTimeout = 0;\nint gNumTracks = 0;\nint gNumActiveVoices = 0;\nint gDelayCount = 0;\nint gState = 0;\n\n// Allocate a buffer for the version string\nchar gVersion[VERSION_STRING_LEN + 2];\n\n// ****************************************************************************\n// setup\n// ****************************************************************************\nvoid setup() {\n\n  // Initialize the LED pin\n  pinMode(LED, OUTPUT);\n  digitalWrite(LED, 0);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  // Provide time for the WAV Trigger Pro to finish reset before trying to send\n  //  any commands.\n  delay(10);\n\n  // WAV Trigger Pro initialization\n  if (!wtp.begin()) {\n    Serial.print(\"Could not start the WAV Trigger Pro\\n\");\n  } else {\n    Serial.print(\"\\n*******************\\n\");\n    Serial.print(\"Qwiic device found\\n\");\n    Serial.print(\"Address: \");\n    Serial.print(wtp.getAddress());\n    Serial.print(\"\\n\");\n  }\n\n  // Issue a stop all tracks\n  wtp.stopAll();\n  delay(5);\n\n  // Get the version string and number of available tracks\n  if (wtp.getVersion(gVersion)) {\n    Serial.print(\"Version: \");\n    Serial.print(gVersion);\n    Serial.print(\"\\n\");\n    //delay(5);\n    gNumTracks = wtp.getNumTracks();\n    Serial.print(\"Number of tracks: \");\n    Serial.print(gNumTracks);\n    Serial.print(\"\\n\");\n    //delay(5);\n  } else\n    Serial.print(\"WAV Trigger Pro response not available\");\n\n  gMsTick = millis();\n  gLastFlashMs = gMsTick;\n  gLastPollMs = gMsTick;\n  gDelayCount = 10;\n  gState = 0;\n}\n\n// ****************************************************************************\n// loop\n// ****************************************************************************\nvoid loop() {\n\n  // ================== MAIN LOOP TASK 1 ===================\n  // Proceed to the next state when the time comes\n  if ((gMsTick - gLastPollMs) &gt; POLLING_PERIOD_MS) {\n    gLastPollMs = gMsTick;\n\n    // Process according to state\n    switch (gState) {\n\n      // State 0: Play the first chord\n      case 0:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing chord 1\");\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_11, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_12, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_13, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_01, 100);\n          delay(50);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_02, 100);\n          delay(50);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_03, 100);\n          gState++;\n          gDelayCount = TEMPO_PERIOD;  // Delay 3\n        }\n        break;\n\n      case 1:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing perc 1\");\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_21, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_22, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_21, 100);\n          gState++;\n          gDelayCount = TEMPO_PERIOD;  // Delay 3\n        }\n        break;\n\n      // State 1: Play the second chord\n      case 2:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing chord 2\");\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_01, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_02, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_OFF, NOTE_03, 0);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_11, 85);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_12, 85);\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_13, 85);\n          gState++;\n          gDelayCount = TEMPO_PERIOD;  // Delay\n        }\n        break;\n\n      case 3:\n        if (gDelayCount &gt; 0)\n          gDelayCount--;\n        else {\n          Serial.println(\"Playing perc 2\");\n          wtp.sendMidiMsg(MIDI_NOTE_ON, NOTE_22, 100);\n          gState = 0;\n          gDelayCount = TEMPO_PERIOD;  // Delay\n        }\n        break;\n\n      // Do nothing\n      default:\n        break;\n    }\n  }\n\n  // ================== MAIN LOOP TASK 2 ===================\n  // Flash the hearbeat LED\n  if ((gMsTick - gLastFlashMs) &gt; HEARTBEAT_PERIOD_MS) {\n    gLastFlashMs = gMsTick;\n    gLedTimeout = 25;\n    digitalWrite(LED, 1);\n  }\n\n\n  // ================== MAIN LOOP TASK 3 ===================\n  // Keep gMsTick up to date\n  if (millis() &gt; gMsTick) {\n    gMsTick = millis();\n    if (gLedTimeout &gt; 0) {\n      if (--gLedTimeout == 0) {\n        digitalWrite(LED, 0);\n      }\n    }\n  }\n}\n</code></pre> <p>The main loop plays these tracks by sending a MIDI message for the selected tracks using the <code>sendMidiMsg</code> function.</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>For more information about the Qwiic WAV Trigger Pro, refer to the following resources:</p> <ul> <li>Schematic</li> <li>KiCad Board Files</li> <li>Board Dimensions</li> <li>STM32 Datasheet</li> <li>STM32 Reference Manual</li> <li>STM32 Application Note</li> <li>PCM510xA Datasheet</li> <li>Keyboard Demo Files<ul> <li>Keyboard Demo SD Image</li> <li>Keyboard Demo Preset Sheet</li> </ul> </li> <li>Percussion Demo Files<ul> <li>Percussion Demo SD Image</li> <li>Percussion Demo Preset Sheet</li> </ul> </li> <li>Robertsonics' WAV Trigger Pro User Guide</li> <li>Robertsonics' Downloads</li> <li>WAV Trigger Pro Arduino Library</li> <li>GitHub Repository</li> </ul>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#status-led-information","title":"Status LED Information","text":"<p>The green STAT LED can provide some basic information on the current status of the Qwiic WAV Trigger Pro.</p> <ul> <li>3 Quick Blinks - No problems. Both the \u00b5SD card and WAV files were found<ul> <li>After the initial pattern, the STAT LED will flash quickly every couple seconds as a \"Heartbeat\"</li> <li>Goes solid while audio is playing</li> </ul> </li> <li>1 Long then 1 Short Blink (Repeating) - No \u00b5SD card found</li> <li>1 Long then 2 Short Blinks (Repeating) - File system error</li> <li>1 Long then 3 Short Blinks (Repeating) - No WAV Fils found on \u00b5SD card</li> <li>1 Long then 4 Short Blinks (Repeating) - Memory error</li> </ul>"},{"location":"single_page/#running-temperature","title":"Running Temperature","text":"<p>The Qwiic WAV Trigger Pro does run a little warm though in our testing it did not provide any adverse effects and is within the operating temperature range of the STM32. If you plan to continuously power and use the board over a long period of time or have it in an enclosed space, you may want to attach a small heat sink to the STM32 IC.</p>"},{"location":"single_page/#preset-demos_1","title":"Preset Demos","text":"<p>Robertsonics has created a couple of sample SD card images for Keyboard and Percussion USB MIDI demos. Each image includes sets of WAV and Preset files in a ZIP download. All you need to do is download the image, unzip it and load it onto an empty and formatted \u00b5SD card and plug the card into the WAV Trigger Pro.</p>"},{"location":"single_page/#keyboard-demo_1","title":"Keyboard Demo","text":"<p>The Keyboard demo is intended for use with a MIDI keyboard and includes three sets of instrument sounds - piano, strings and organ - over the same 3-octave range. It also includes four presets that select one or more of the instruments to be available with different performance parameters. You can download the SD image and Preset sheet from the links below:</p> <p> WAV Trigger Pro Keyboard Demo SD Image </p> <p> WAV Trigger Pro Keyboard Demo Preset Sheet </p>"},{"location":"single_page/#percussion-demo_1","title":"Percussion Demo","text":"<p>The Percussion demo is intended for use with a velocity-sensitive pad MIDI controller to demonstrate things like velocity mapping and multiple actions per MIDI note. It includes a selection of effects, dialog and percussion. The preset file includes comments to help explain how the demo works. You can download the SD image and Preset sheet for the demo from the links below:</p> <p> WAV Trigger Pro Percussion Demo SD Image </p> <p> WAV Trigger Pro Percussion Demo Preset Sheet </p>"},{"location":"single_page/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"software_setup/","title":"Library Installation","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"software_setup/#wav-trigger-pro-qwiic-arduino-library","title":"WAV Trigger Pro Qwiic Arduino Library","text":"<p>The WAV Trigger Pro Qwiic Arduino Library allows you to control the audio playback on the WAV Trigger Pro over a Qwiic connection to an Arduino development board. Users can download and install the library through the Arduino Library Manager by searching for \"WAV Trigger Pro  Qwiic\" and selecting the latest version. If you prefer to manually install the library, download a ZIP of it by clicking the button below:</p> <p> WAV Trigger Pro Qwiic Arduino Library (ZIP) </p> <p>With the library installed, let's take a closer look at the examples included in it.</p>"},{"location":"trigger_assembly/","title":"Trigger Input Assembly","text":""},{"location":"trigger_assembly/#preparing-trigger-pins","title":"Preparing Trigger Pins","text":"<p>The WAV Trigger Pro has eight trigger pins routed to 0.1\"-spaced headers that can be used to trigger MIDI playback for the first eight MIDI notes defined by the Preset file. If you're using these pins we recommend soldering either wire to whatever input you decide to use (button, switch, etc.) or if you'd like a removeable connection you can solder headers to these pins and use jumper wires to connect to the trigger inputs.</p> <p></p>"},{"location":"trigger_assembly/#trigger-breadboard-assembly","title":"Trigger Breadboard Assembly","text":"<p>For the purposes of this guide, we wired the first four trigger inputs to four push-buttons on a breadboard for a quick demo on using these inputs. Make sure to create a common ground by connecting a wire from one of the WAV Trigger Pro's ground pins to the ground rail on the breadboard and then wire each button to a trigger pin and the breadboard's ground rail like the photo below shows: </p> <p></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#serial-console-interface","title":"Serial Console Interface","text":"<p>The WAV Trigger Pro firmware (both Device &amp; Host) sets the STM32 UART pins (RX/TX) up to be used with a serial terminal like the Arduino Serial monitor. It works by sending ASCII commands to trigger playing, looping and stopping tracks, loading presets and also device status which can help provide important information about a connected \u00b5SD card's performance. This serial interface works simultaneously with everything else running on the board. Refer to the Audio Output &amp; Serial Console section of this guide for more information on these commands.</p>"},{"location":"troubleshooting/#status-led-information","title":"Status LED Information","text":"<p>The green STAT LED can provide some basic information on the current status of the Qwiic WAV Trigger Pro.</p> <ul> <li>3 Quick Blinks - No problems. Both the \u00b5SD card and WAV files were found<ul> <li>After the initial pattern, the STAT LED will flash quickly every couple seconds as a \"Heartbeat\"</li> <li>Goes solid while audio is playing</li> </ul> </li> <li>1 Long then 1 Short Blink (Repeating) - No \u00b5SD card found</li> <li>1 Long then 2 Short Blinks (Repeating) - File system error</li> <li>1 Long then 3 Short Blinks (Repeating) - No WAV Fils found on \u00b5SD card</li> <li>1 Long then 4 Short Blinks (Repeating) - Memory error</li> </ul>"},{"location":"troubleshooting/#running-temperature","title":"Running Temperature","text":"<p>The Qwiic WAV Trigger Pro does run a little warm though in our testing it did not provide any adverse effects and is within the operating temperature range of the STM32. If you plan to continuously power and use the board over a long period of time or have it in an enclosed space, you may want to attach a small heat sink to the STM32 IC.</p>"},{"location":"troubleshooting/#preset-demos","title":"Preset Demos","text":"<p>Robertsonics has created a couple of sample SD card images for Keyboard and Percussion USB MIDI demos. Each image includes sets of WAV and Preset files in a ZIP download. All you need to do is download the image, unzip it and load it onto an empty and formatted \u00b5SD card and plug the card into the WAV Trigger Pro.</p>"},{"location":"troubleshooting/#keyboard-demo","title":"Keyboard Demo","text":"<p>The Keyboard demo is intended for use with a MIDI keyboard and includes three sets of instrument sounds - piano, strings and organ - over the same 3-octave range. It also includes four presets that select one or more of the instruments to be available with different performance parameters. You can download the SD image and Preset sheet from the links below:</p> <p> WAV Trigger Pro Keyboard Demo SD Image </p> <p> WAV Trigger Pro Keyboard Demo Preset Sheet </p>"},{"location":"troubleshooting/#percussion-demo","title":"Percussion Demo","text":"<p>The Percussion demo is intended for use with a velocity-sensitive pad MIDI controller to demonstrate things like velocity mapping and multiple actions per MIDI note. It includes a selection of effects, dialog and percussion. The preset file includes comments to help explain how the demo works. You can download the SD image and Preset sheet for the demo from the links below:</p> <p> WAV Trigger Pro Percussion Demo SD Image </p> <p> WAV Trigger Pro Percussion Demo Preset Sheet </p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the  repository."},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the  repository."},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}